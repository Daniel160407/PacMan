#include "Board.hpp"
#include <iostream>

Board::Board() : boardLayout(generateBoardLayout()) {}

Board Board::getInstance() {
    return Board();
}

std::vector<std::vector<short>> Board::getBoardLayout() {
    return boardLayout;
}

std::vector<std::vector<short>> Board::generateBoardLayout() {
    return {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}, // 1
        {1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1}, // 2
        {1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1}, // 3
        {1,3,1,0,0,1,2,1,0,0,0,1,2,1,1,2,1,0,0,0,1,2,1,0,0,1,3,1}, // 4
        {1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1}, // 5
        {1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1}, // 6
        {1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1}, // 7
        {1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1}, // 8
        {1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1}, // 9
        {1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1}, // 10
        {0,0,0,0,0,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,0,0,0,0,0}, // 11
        {0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0}, // 12
        {0,0,0,0,0,1,2,1,1,0,1,1,1,4,4,1,1,1,0,1,1,2,1,0,0,0,0,0}, // 13
        {1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1}, // 14
        {0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0}, // 15
        {1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1}, // 16
        {0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0}, // 17
        {0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0}, // 18
        {0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0}, // 19
        {1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1}, // 20
        {1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1}, // 21
        {1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1}, // 22
        {1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1}, // 23
        {1,3,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,3,1}, // 24
        {1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1}, // 25
        {1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1}, // 26
        {1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1}, // 27
        {1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1}, // 28
        {1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1}, // 29
        {1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1}, // 30
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}  // 31
    };
}

std::vector<std::vector<short>> Board::getEmptyBlockCoordinates() {
    std::vector<std::vector<short>> emptyBlockCoordinates;

    for (int y = 0; y < boardLayout.size(); y++) {
        for (int x = 0; x < boardLayout[y].size(); x++) {
            if (boardLayout[y][x] == 2) {
                std::vector<short> coordinates;
                coordinates.push_back(x);
                coordinates.push_back(y);
                emptyBlockCoordinates.push_back(coordinates);
            }
        }
    }

    return emptyBlockCoordinates;
}

void Board::draw(sf::RenderWindow& window) {
    sf::RectangleShape wallSegment(sf::Vector2f(CELL_SIZE, CELL_SIZE));
    
    for (int y = 0; y < boardLayout.size(); y++) {
        for (int x = 0; x < boardLayout[y].size(); x++) {
            if (boardLayout[y][x] == 1) {
                wallSegment.setPosition(x * CELL_SIZE, y * CELL_SIZE);
            
                bool neighbors[8] = {
                    (y > 0 && x > 0) && (boardLayout[y-1][x-1] == 1),
                    (y > 0) && (boardLayout[y-1][x] == 1),
                    (y > 0 && x < boardLayout[y].size()-1) && (boardLayout[y-1][x+1] == 1),
                    (x > 0) && (boardLayout[y][x-1] == 1),
                    (x < boardLayout[y].size()-1) && (boardLayout[y][x+1] == 1),
                    (y < boardLayout.size()-1 && x > 0) && (boardLayout[y+1][x-1] == 1),
                    (y < boardLayout.size()-1) && (boardLayout[y+1][x] == 1),
                    (y < boardLayout.size()-1 && x < boardLayout[y].size()-1) && (boardLayout[y+1][x+1] == 1)
                };
            
                wallSegment.setFillColor(sf::Color::Blue);
            
                window.draw(wallSegment);
            }
        }
    }
}